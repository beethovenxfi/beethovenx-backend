extend type Query {
    protocol: Protocol!
    protocolInfo: ProtocolInfo!
    users(first: Int = 20, skip: Int = 0, where: UsersWhere, orderBy: UsersOrderBy): [User!]!
    user(id: ID!): User
    farms(first: Int = 20, skip: Int = 0, where: FarmsWhere, orderBy: FarmsOrderBy): [Farm!]!
    farm(id: ID!): Farm
    tokens(first: Int = 20, skip: Int = 0, where: TokensWhere, orderBy: TokensOrderBy): [Token!]!
    token(address: String!): Token
}

type Protocol {
    protocolInfo: ProtocolInfo!
    users(first: Int = 20, skip: Int = 0, where: UsersWhere, orderBy: UsersOrderBy): [User!]!
    farms(first: Int = 20, skip: Int = 0, where: FarmsWhere, orderBy: FarmsOrderBy): [Farm!]!
}

type ProtocolInfo {
    totalLiquidity: BigDecimal!
    totalSwapVolume: BigDecimal!
    totalSwapFee: BigDecimal!
    poolCount: BigInt!
    beetsPrice: BigDecimal!
    fbeetsPrice: BigDecimal!
    circulatingSupply: BigDecimal!
    marketCap: BigDecimal!
    swapFee24h: BigDecimal!
    swapVolume24h: BigDecimal!
}

type User {
    id: ID!
    address: String!
    farms(where: UserFarmsWhere, orderBy: UserFarmsOrderBy): [Farm!]!
}

type UserFarm {
    user: User!
    stakedAmount(uint: TokenUnit = BIG_DECIMAL): BigNumber!
    harvestedRewards: [HarvestedFarmReward!]!
    farm: Farm!
}

type Farm {
    id: ID!
    pair: Bytes!
    allocPoint: Int!
    totalAmountStaked(uint: TokenUnit = BIG_DECIMAL): BigNumber!
    userCount: Int!
    block: Int!
    lastRewardBlock: Int!
    timestamp: Int!
    users(first: Int = 20, skip: Int = 0, where: UsersWhere, orderBy: UsersOrderBy): [User!]!
    rewards(where: TokenRewardsWhere): [FarmReward!]!
}

type FarmReward {
    rewardPerSecond(uint: TokenUnit = BIG_DECIMAL): BigNumber!
    rewardPerDay(uint: TokenUnit = BIG_DECIMAL): BigNumber!
    token: Token!
}

type HarvestedFarmReward {
    token: Token!
    amount(uint: TokenUnit = BIG_DECIMAL): BigNumber!
}

type Token {
    address: Bytes!
    name: String!
    symbol: String!
    decimals: Int!
    price: TokenPrice!
}

type TokenPrice {
    token: Bytes!
    price: BigDecimal!
    timestamp: Int!
}

enum TokenUnit {
    BIG_DECIMAL
    BIG_INT
}

input TokensWhere {
    address_in: [ID!]
}

enum TokensOrderBy {
    ADDRESS_ASC
    ADDRESS_DESC
    NAME_ASC
    NAME_DESC
    SYMBOL_ASC
    SYMBOL_DESC
    PRICE_ASC
    PRICE_DESC
}

input FarmsWhere {
    id_in: [ID!]
    pair_in: [String!]
}

input UserFarmsWhere {
    id_in: [ID!]
    pair_in: [String!]
    staked_amount_gt: BigNumber
    staked_amount_lt: BigNumber
}

input TokenRewardsWhere {
    token_in: [String!]
}

enum FarmsOrderBy {
    POOL_ID_ASC
    POOL_ID_DESC
    TVL
}

enum UserFarmsOrderBy {
    POOL_ID_ASC
    POOL_ID_DESC
    STAKED_AMOUNT_ASC
    STAKED_AMOUNT_DESC
}

input UsersWhere {
    id_in: [ID!]
    address: String
    address_in: [String!]
    total_lp_lt: Int
    total_lp_gt: Int
}

enum UsersOrderBy {
    ADDRESS_ASC
    ADDRESS_DESC
    TOTAL_LP_VALUE_ASC
    TOTAL_LP_VALUE_DESC
}
