/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BeethovenxMasterChefInterface extends ethers.utils.Interface {
  functions: {
    "POOL_PERCENTAGE()": FunctionFragment;
    "TREASURY_PERCENTAGE()": FunctionFragment;
    "add(uint256,address,address)": FunctionFragment;
    "beets()": FunctionFragment;
    "beetsPerBlock()": FunctionFragment;
    "deposit(uint256,uint256,address)": FunctionFragment;
    "emergencyWithdraw(uint256,address)": FunctionFragment;
    "harvest(uint256,address)": FunctionFragment;
    "harvestAll(uint256[],address)": FunctionFragment;
    "lpTokens(uint256)": FunctionFragment;
    "massUpdatePools(uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingBeets(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewarder(uint256)": FunctionFragment;
    "set(uint256,uint256,address,bool)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "updateEmissionRate(uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdrawAndHarvest(uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "POOL_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "beets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beetsPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestAll",
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingBeets",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewarder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndHarvest",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "POOL_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beetsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvestAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingBeets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndHarvest",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256,address)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256,address)": EventFragment;
    "Harvest(address,uint256,uint256)": EventFragment;
    "LogPoolAddition(uint256,uint256,address,address)": EventFragment;
    "LogSetPool(uint256,uint256,address,bool)": EventFragment;
    "LogUpdatePool(uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetTreasuryAddress(address,address)": EventFragment;
    "UpdateEmissionRate(address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPoolAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEmissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class BeethovenxMasterChef extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BeethovenxMasterChefInterface;

  functions: {
    POOL_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "POOL_PERCENTAGE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    TREASURY_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "TREASURY_PERCENTAGE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(uint256,address,address)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    beets(overrides?: CallOverrides): Promise<[string]>;

    "beets()"(overrides?: CallOverrides): Promise<[string]>;

    beetsPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "beetsPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256,address)"(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    harvest(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvest(uint256,address)"(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    harvestAll(
      _pids: BigNumberish[],
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvestAll(uint256[],address)"(
      _pids: BigNumberish[],
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lpTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "lpTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingBeets(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pending: BigNumber }>;

    "pendingBeets(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pending: BigNumber }>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accBeetsPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accBeetsPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    treasury(
      _treasuryAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "treasury(address)"(
      _treasuryAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    updateEmissionRate(
      _beetsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateEmissionRate(uint256)"(
      _beetsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdrawAndHarvest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAndHarvest(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  POOL_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  "POOL_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

  TREASURY_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  "TREASURY_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _rewarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(uint256,address,address)"(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _rewarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  beets(overrides?: CallOverrides): Promise<string>;

  "beets()"(overrides?: CallOverrides): Promise<string>;

  beetsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "beetsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,address)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256,address)"(
    _pid: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  harvest(
    _pid: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvest(uint256,address)"(
    _pid: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  harvestAll(
    _pids: BigNumberish[],
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvestAll(uint256[],address)"(
    _pids: BigNumberish[],
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lpTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "lpTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  massUpdatePools(
    pids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "massUpdatePools(uint256[])"(
    pids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingBeets(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingBeets(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accBeetsPerShare: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accBeetsPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "rewarder(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _rewarder: string,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,address,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _rewarder: string,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  treasury(
    _treasuryAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "treasury(address)"(
    _treasuryAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  "treasuryAddress()"(overrides?: CallOverrides): Promise<string>;

  updateEmissionRate(
    _beetsPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateEmissionRate(uint256)"(
    _beetsPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdrawAndHarvest(
    _pid: BigNumberish,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAndHarvest(uint256,uint256,address)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    POOL_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "POOL_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURY_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "TREASURY_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(uint256,address,address)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    beets(overrides?: CallOverrides): Promise<string>;

    "beets()"(overrides?: CallOverrides): Promise<string>;

    beetsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "beetsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _pid: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256,address)"(
      _pid: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(
      _pid: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvest(uint256,address)"(
      _pid: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    harvestAll(
      _pids: BigNumberish[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvestAll(uint256[],address)"(
      _pids: BigNumberish[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lpTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "lpTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingBeets(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingBeets(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accBeetsPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accBeetsPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "treasury(address)"(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<string>;

    updateEmissionRate(
      _beetsPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateEmissionRate(uint256)"(
      _beetsPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accBeetsPerShare: BigNumber;
      }
    >;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accBeetsPerShare: BigNumber;
      }
    >;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdrawAndHarvest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAndHarvest(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): EventFilter;

    Harvest(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    LogPoolAddition(
      pid: BigNumberish | null,
      allocPoint: null,
      lpToken: string | null,
      rewarder: string | null
    ): EventFilter;

    LogSetPool(
      pid: BigNumberish | null,
      allocPoint: null,
      rewarder: string | null,
      overwrite: null
    ): EventFilter;

    LogUpdatePool(
      pid: BigNumberish | null,
      lastRewardBlock: null,
      lpSupply: null,
      accBeetsPerShare: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SetTreasuryAddress(
      oldAddress: string | null,
      newAddress: string | null
    ): EventFilter;

    UpdateEmissionRate(user: string | null, _beetsPerSec: null): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): EventFilter;
  };

  estimateGas: {
    POOL_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "POOL_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURY_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "TREASURY_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(uint256,address,address)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    beets(overrides?: CallOverrides): Promise<BigNumber>;

    "beets()"(overrides?: CallOverrides): Promise<BigNumber>;

    beetsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "beetsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256,address)"(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    harvest(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "harvest(uint256,address)"(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    harvestAll(
      _pids: BigNumberish[],
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "harvestAll(uint256[],address)"(
      _pids: BigNumberish[],
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lpTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "lpTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingBeets(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingBeets(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    treasury(
      _treasuryAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "treasury(address)"(
      _treasuryAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateEmissionRate(
      _beetsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateEmissionRate(uint256)"(
      _beetsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAndHarvest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawAndHarvest(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    POOL_PERCENTAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "POOL_PERCENTAGE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TREASURY_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TREASURY_PERCENTAGE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(uint256,address,address)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    beets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beetsPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beetsPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256,address)"(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvest(uint256,address)"(
      _pid: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    harvestAll(
      _pids: BigNumberish[],
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvestAll(uint256[],address)"(
      _pids: BigNumberish[],
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lpTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lpTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingBeets(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingBeets(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewarder(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    treasury(
      _treasuryAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "treasury(address)"(
      _treasuryAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateEmissionRate(
      _beetsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateEmissionRate(uint256)"(
      _beetsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAndHarvest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAndHarvest(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
