scalar JSON

extend type Query {
    pools: [GqlBalancerPool!]!
    poolsJSON: [JSON!]!
    pool(id: String!): GqlBalancerPool!
    poolsPastPools: [GqlBalancerPool!]!
    latestPrice(id: ID!): GqlBalancerTokenLatestPrice
    poolSnapshots(poolId: ID!): [GqlBalancerPoolSnapshot!]!
    poolGet24hData(poolId: ID!): GqlBalancerPool24h!
    balancerGetTopTradingPairs: [GqlBalancerTradePairSnapshot!]!
    balancerGetPoolActivities(input: GqlBalancerGetPoolActivitiesInput!): [GqlBalancerPoolActivity!]!
}

type GqlBalancerPool {
    id: ID!
    name: String
    symbol: String!
    address: Bytes!
    poolType: String
    swapFee: BigDecimal!
    totalShares: BigDecimal!
    tokens: [GqlBalancerPoolToken!]!
    mainTokens: [String!]
    tokensList: [Bytes!]!
    totalWeight: BigDecimal
    amp: BigInt
    expiryTime: BigInt
    unitSeconds: BigInt
    principalToken: Bytes
    baseToken: Bytes
    swapEnabled: Boolean!

    swapsCount: BigInt!
    holdersCount: BigInt!
    totalLiquidity: BigDecimal!
    totalShares: BigDecimal!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
    owner: Bytes
    factory: Bytes
    createTime: Int!
    mainIndex: Int
    wrappedIndex: Int
    upperTarget: String
    lowerTarget: String
    linearPools: [GqlBalancerPoolLinearPoolData!]
    stablePhantomPools: [GqlBalancerPoolStablePhantomPoolData!]
    tokenRates: [String!]
    farm: GqlBeetsFarm
    farmTotalLiquidity: BigDecimal!
    composition: GqlBalancerPoolComposition!
    apr: GqlBalancePoolApr!
    isNewPool: Boolean
    volume24h: BigDecimal!
    fees24h: BigDecimal!
}

type GqlBalancerPoolToken {
    id: ID!
    address: String!
    balance: BigDecimal!
    decimals: Int!
    weight: BigDecimal
    priceRate: BigDecimal!
    name: String!
    symbol: String!
    isBpt: Boolean
    isPhantomBpt: Boolean
}

type GqlBalancerPoolLinearPoolData {
    id: ID!
    address: String!
    symbol: String!
    priceRate: String!
    mainToken: GqlBalancerPoolLinearPoolMainToken!
    wrappedToken: GqlBalancerPoolLinearPoolWrappedToken!
    unwrappedTokenAddress: String!
    totalSupply: String!
    balance: String!
    poolToken: String!
    mainTokenTotalBalance: String!
}

type GqlBalancerPoolStablePhantomPoolData {
    id: ID!
    address: String!
    symbol: String!
    tokens: [GqlBalancerPoolToken!]!
    totalSupply: String!
    balance: String!
}

type GqlBalancerPoolLinearPoolMainToken {
    address: String!
    index: Int!
    balance: String!
    totalSupply: String!
    name: String!
    symbol: String!
    decimals: Int!
}

type GqlBalancerPoolLinearPoolWrappedToken {
    address: String!
    index: Int!
    balance: String!
    totalSupply: String!
    priceRate: String!
    name: String!
    symbol: String!
    decimals: Int!
}

type GqlBalancerTokenLatestPrice {
    asset: Bytes!
    block: BigInt!
    id: ID!
    price: BigDecimal!
    priceUSD: BigDecimal!
    pricingAsset: Bytes!
}

type GqlBalancerPoolSnapshot {
    id: ID!
    poolId: ID!
    totalShares: BigDecimal!
    totalSwapVolume: BigDecimal!
    totalSwapFee: BigDecimal!
    totalLiquidity: BigDecimal!
    timestamp: Int!
    swapVolume24h: BigDecimal!
    swapFees24h: BigDecimal!
    liquidityChange24h: BigDecimal!
    tokens: [GqlBalancerPoolToken!]!
}

type GqlBalancerTradePairSnapshot {
    id: ID!
    pair: GqlBalancerTradePair!
    timestamp: Int!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
}

type GqlBalancerTradePairToken {
    address: String!
    symbol: String!
}

type GqlBalancerTradePair {
    token0: GqlBalancerTradePairToken!
    token1: GqlBalancerTradePairToken!
}

type GqlBalancerPool24h {
    id: ID!
    address: Bytes!
    totalShares: BigDecimal!
    totalSwapVolume: BigDecimal!
    totalSwapFee: BigDecimal!
    totalLiquidity: BigDecimal!
    swapVolume24h: BigDecimal!
    swapFees24h: BigDecimal!
    liquidityChange24h: BigDecimal!
}

type GqlBalancePoolApr {
    total: BigDecimal!
    swapApr: BigDecimal!
    beetsApr: BigDecimal!
    thirdPartyApr: BigDecimal!
    items: [GqlBalancePoolAprItem!]!
    hasRewardApr: Boolean!
}

type GqlBalancePoolAprItem {
    title: String!
    apr: BigDecimal!
    subItems: [GqlBalancePoolAprSubItem!]
}

type GqlBalancePoolAprSubItem {
    title: String!
    apr: BigDecimal!
}

type GqlBalancerPoolActivity {
    id: ID!
    amounts: [BigDecimal!]!
    poolId: String!
    sender: Bytes!
    timestamp: Int!
    tx: Bytes!
    type: GqlBalancerPoolActivityType!
    valueUSD: BigDecimal!
}

enum GqlBalancerPoolActivityType {
    Join
    Exit
}

input GqlBalancerGetPoolActivitiesInput {
    poolId: ID!
    first: Int!
    skip: Int!
    sender: String
}

type GqlBalancerPoolComposition {
    tokens: [GqlBalancerPoolCompositionToken!]!
}

type GqlBalancerPoolCompositionToken {
    address: String!
    symbol: String!
    decimals: Int!
    weight: BigDecimal
    balance: BigDecimal!
    valueUSD: BigDecimal!

    nestedTokens: [GqlBalancerPoolCompositionToken!]
}
